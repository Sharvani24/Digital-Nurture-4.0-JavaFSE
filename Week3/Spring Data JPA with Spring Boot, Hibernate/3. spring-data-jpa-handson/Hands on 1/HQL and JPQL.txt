HQL and JPQL:
ðŸ”¹ What is HQL?
HQL (Hibernate Query Language) is an object-oriented query language similar to SQL, but it operates on Hibernate entity objects and their properties, not directly on tables or columns.

Syntax is close to SQL but uses class names and field names.

ðŸ”¹ What is JPQL?
JPQL (Java Persistence Query Language) is defined as part of JPA (Java Persistence API).

It is platform-independent, uses entity object names, and is used in EntityManager APIs.

ðŸ”¸ JPQL is a subset of HQL. All JPQL queries are valid HQL, but HQL has more capabilities (e.g., INSERT).
ðŸ§ª Sample Project Setup (Using Hibernate)
ðŸ”¸ Step 1: Maven Dependencies
<!-- pom.xml -->
<dependencies>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.6.15.Final</version>
    </dependency>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <version>5.6.15.Final</version>
    </dependency>
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>1.4.200</version>
    </dependency>
</dependencies>
ðŸ”¸ Step 2: Sample Entity â€“ Student.java
import javax.persistence.*;

@Entity
@Table(name = "student")
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(name = "name")
    private String name;

    @Column(name = "marks")
    private int marks;

    // Getters and setters
}
ðŸ”¸ Step 3: HQL / JPQL Examples

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.List;

public class HQLJPQLExample {
    public static void main(String[] args) {
        SessionFactory factory = new Configuration()
                .configure("hibernate.cfg.xml")
                .addAnnotatedClass(Student.class)
                .buildSessionFactory();

        Session session = factory.openSession();

        try {
            session.beginTransaction();

            // JPQL Query - SELECT
            List<Student> students = session.createQuery("FROM Student WHERE marks > 80", Student.class).getResultList();
            students.forEach(s -> System.out.println(s.getName()));

            // HQL Query - UPDATE
            int updated = session.createQuery("UPDATE Student SET marks = 100 WHERE name = 'John'").executeUpdate();
            System.out.println("Rows updated: " + updated);

            // HQL Query - DELETE
            int deleted = session.createQuery("DELETE FROM Student WHERE marks < 50").executeUpdate();
            System.out.println("Rows deleted: " + deleted);

            session.getTransaction().commit();
        } finally {
            session.close();
            factory.close();
        }
    }
}
ðŸ”¸ Step 4: Hibernate Configuration â€“ hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">org.h2.Driver</property>
        <property name="hibernate.connection.url">jdbc:h2:mem:testdb</property>
        <property name="hibernate.dialect">org.hibernate.dialect.H2Dialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="hibernate.show_sql">true</property>
        <mapping class="Student"/>
    </session-factory>
</hibernate-configuration>
